@model SecondHandStoreApp.Models.StoreItem

@{
    ViewBag.Title = "Create2";
}


<div class="container">

    <div class="col-md-12">
        <ul class="breadcrumb">
            <li>
                <a href="~/Home/Index">Home</a>
            </li>
            <li>Sell - Details</li>
        </ul>
    </div>

    <div class="col-md-12" id="checkout">

        <div class="box">

            @using (Html.BeginForm("Create2", "StoreItems", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <h1>Start selling</h1>

                <div class="form-horizontal">
                    <ul class="nav nav-pills nav-justified">
                        <li class="">
                            <a href="~/StoreItems/Create1/@Model.ID"><i class="fa fa-map-marker"></i><br>Item</a>
                        </li>
                        <li class="active">
                            <a href="#"><i class="fa fa-truck"></i><br>Details</a>
                        </li>
                        <li class="disabled">
                            <a href="#"><i class="fa fa-money"></i><br> Bank account</a>
                        </li>
                        <li class="disabled">
                            <a href="#"><i class="fa fa-eye"></i><br>Check & done</a>
                        </li>
                    </ul>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.ID)

                    <div class="content">
                        <div class="row">
                            <table>
                                <tr>
                                    @foreach (var item in Model.Images)
                                    {
                                        <td width="150px" height="200px">
                                            <img class="img-responsive img-thumbnail" src="~/@item.Image" alt="" />
                                            @Html.ActionLink("Delete Image", "DeleteImg", "Admin", new { itemID = Model.ID, imgID = item.ID }, null)
                                        </td>
                                    }
                                </tr>

                            </table>
                            <div class="form-group">
                                <label for="file" class="control-label col-md-2">Upload Image:</label>
                                <div class="col-md-10">
                                    <input type="file" name="file" id="files" multiple="multiple" style="width: 100%;" />
                                    <output id="list"></output>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.condition, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.condition, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.condition, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.material, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.material, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.material, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group size">
                                @Html.LabelFor(model => model.size, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.size, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.size, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group shoeSize">
                                @Html.LabelFor(model => model.shoeSize, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.shoeSize, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.shoeSize, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.length, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.length, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.length, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.width, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.width, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.width, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <!-- /.row -->

                        <div class="hidden" style="display: none;">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ItemName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ItemName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ItemName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.itemGender, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.itemGender, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.itemGender, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.category, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.category, htmlAttributes: new { @class = "form-control category" })
                                    @Html.ValidationMessageFor(model => model.category, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group Clothes">
                                @Html.LabelFor(model => model.subcategoryClothes, htmlAttributes: new { @class = "control-label col-md-2 " })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.subcategoryClothes, htmlAttributes: new { @class = "form-control " })
                                    @Html.ValidationMessageFor(model => model.subcategoryClothes, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group Shoes">
                                @Html.LabelFor(model => model.subcategoryShoes, htmlAttributes: new { @class = "control-label col-md-2 " })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.subcategoryShoes, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.subcategoryShoes, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group Bags">
                                @Html.LabelFor(model => model.subcategoryBags, htmlAttributes: new { @class = "control-label col-md-2 " })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.subcategoryBags, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.subcategoryBags, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group Accessories">
                                @Html.LabelFor(model => model.subcategoryAccessories, htmlAttributes: new { @class = "control-label col-md-2 " })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.subcategoryAccessories, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.subcategoryAccessories, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <!-- /.hidden -->
                    </div>
                    
                </div>

                    <div class="box-footer">
                        <div class="pull-left">
                            <a href="~/StoreItems/Create1/@Model.ID" class="btn btn-default"><i class="fa fa-chevron-left"></i>Back</a>
                        </div>
                        <div class="pull-right">
                            <button type="submit" class="btn btn-primary">
                                Continue<i class="fa fa-chevron-right"></i>
                            </button>
                        </div>
                    </div>
            }

        </div>

                    <!-- /.box -->


                </div>
    <!-- /.col-md-12 -->


</div>
<!-- /.container -->



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        hideAll();

        $(".category")
              .change(function () {
                  switch ($(this).val()) {
                      case "0":
                          hideAll();
                          $(".size").show();
                          break;
                      case "2":
                          hideAll();
                          $(".shoeSize").show();
                          break;
                      case "3":
                          hideAll();
                          break;
                      case "1":
                          hideAll();
                          break;
                      default:
                          hideAll();
                  }
              })
          .change();

        function hideAll() {
            $(".size").hide();
            $(".shoeSize").hide();
        }

    });
        function handleFileSelect(evt) {
            var files = evt.target.files;

            //clear the previos list of pictures
            document.getElementById('list').innerHTML = "";

            // Loop through the FileList and render image files as thumbnails.
            for (var i = 0, f; f = files[i]; i++) {

                // Only process image files.
                if (!f.type.match('image.*')) {
                    continue;
                }

                var reader = new FileReader();

                // Closure to capture the file information.
                reader.onload = (function (theFile) {
                    return function (e) {
                        // Render thumbnail.
                        var span = document.createElement('span');
                        span.innerHTML =
                        [
                          '<img style="height: 75px; border: 1px solid #000; margin: 5px" src="',
                          e.target.result,
                          '" title="', escape(theFile.name),
                          '"/>'
                        ].join('');

                        document.getElementById('list').insertBefore(span, null);
                    };
                })(f);

                // Read in the image file as a data URL.
                reader.readAsDataURL(f);
            }
        }

        document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>
}
